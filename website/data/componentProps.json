[
  {
    "tags": {},
    "filePath": "packages/Alert/src/Alert.tsx",
    "description": "",
    "displayName": "Alert",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title of the alert",
        "name": "title",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "message": {
        "defaultValue": null,
        "description": "The content to display inside the Alert",
        "name": "message",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "type": {
        "defaultValue": null,
        "description": "Change the type of the Alert",
        "name": "type",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": true,
        "type": { "name": "Type" }
      },
      "appearance": {
        "defaultValue": null,
        "description": "Change the Alert appearance",
        "name": "appearance",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": false,
        "type": { "name": "Appearance" }
      },
      "className": {
        "defaultValue": null,
        "description": "Add a specific class to the Alert",
        "name": "className",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "closable": {
        "defaultValue": null,
        "description": "Set if the Alert can be closed by the user",
        "name": "closable",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Action on Alert close button click",
        "name": "onClose",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "button": {
        "defaultValue": null,
        "description": "Alert button",
        "name": "button",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": false,
        "type": { "name": "AlertButton" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Alert/src/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          { "fileName": "packages/Alert/src/Alert.tsx", "name": "AlertProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Button/src/Button.tsx",
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the button",
        "name": "children",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled the button, the user cannot click on them",
        "name": "disabled",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "active": {
        "defaultValue": null,
        "description": "Sets the button in an active state",
        "name": "active",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "loading": {
        "defaultValue": null,
        "description": "Replaces button text with a spinner while a background action is being performed",
        "name": "loading",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes the size of button, giving more or less padding",
        "name": "size",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "appearance": {
        "defaultValue": null,
        "description": "Button appearance",
        "name": "appearance",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "Appearance" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "iconLeading": {
        "defaultValue": null,
        "description": "Icon to display to the left of button content",
        "name": "iconLeading",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "iconTrailing": {
        "defaultValue": null,
        "description": "Icon to display to the right of button content",
        "name": "iconTrailing",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "showOnlyIconOnMobile": {
        "defaultValue": null,
        "description": "Display only the icon in mobile",
        "name": "showOnlyIconOnMobile",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback when clicked",
        "name": "onClick",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "type": {
        "defaultValue": null,
        "description": "Optional prop to specify the type of the Button",
        "name": "type",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "\"button\" | \"reset\" | \"submit\"" }
      },
      "intercomTarget": {
        "defaultValue": null,
        "description": "Add a data-intercom-target with unique id to link a components to a Product Tour step",
        "name": "intercomTarget",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "Add a specific class to the button",
        "name": "className",
        "parent": {
          "fileName": "packages/Button/src/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/Button/src/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/ButtonGroup/src/ButtonGroup.tsx",
    "description": "",
    "displayName": "ButtonGroupItem",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the `ButtonItem`",
        "name": "children",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "active": {
        "defaultValue": null,
        "description": "Whether or not the `ButtonItem` is active",
        "name": "active",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled the `ButtonItem`, the user cannot click on them",
        "name": "disabled",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback function executed when a `ButtonItem` is clicked",
        "name": "onClick",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/ButtonGroup/src/ButtonGroup.tsx",
    "description": "",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "compact": {
        "defaultValue": null,
        "description": "Changes the padding of button group",
        "name": "compact",
        "parent": {
          "fileName": "packages/ButtonGroup/src/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        },
        "declarations": [
          {
            "fileName": "packages/ButtonGroup/src/ButtonGroup.tsx",
            "name": "ButtonGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "small": {
        "defaultValue": null,
        "description": "Changes the size of button group",
        "name": "small",
        "parent": {
          "fileName": "packages/ButtonGroup/src/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        },
        "declarations": [
          {
            "fileName": "packages/ButtonGroup/src/ButtonGroup.tsx",
            "name": "ButtonGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "children": {
        "defaultValue": null,
        "description": "React child node representing the button content text or icon",
        "name": "children",
        "parent": {
          "fileName": "packages/ButtonGroup/src/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        },
        "declarations": [
          {
            "fileName": "packages/ButtonGroup/src/ButtonGroup.tsx",
            "name": "ButtonGroupProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/ButtonGroup/src/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        },
        "declarations": [
          {
            "fileName": "packages/ButtonGroup/src/ButtonGroup.tsx",
            "name": "ButtonGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/franck.gaudin/Devel/Igloo/components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
    "description": "",
    "displayName": "ButtonGroupItem",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the `ButtonItem`",
        "name": "children",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "active": {
        "defaultValue": null,
        "description": "Whether or not the `ButtonItem` is active",
        "name": "active",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disabled the `ButtonItem`, the user cannot click on them",
        "name": "disabled",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback function executed when a `ButtonItem` is clicked",
        "name": "onClick",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
          "name": "ButtonGroupItemProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/ButtonGroup/src/ButtonGroupItem.tsx",
            "name": "ButtonGroupItemProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Card/src/Card.tsx",
    "description": "",
    "displayName": "Card",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the card",
        "name": "children",
        "parent": {
          "fileName": "packages/Card/src/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          { "fileName": "packages/Card/src/Card.tsx", "name": "CardProps" },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes the size of card, giving more or less padding",
        "name": "size",
        "parent": {
          "fileName": "packages/Card/src/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          { "fileName": "packages/Card/src/Card.tsx", "name": "CardProps" }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Card/src/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          { "fileName": "packages/Card/src/Card.tsx", "name": "CardProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Checkbox/src/Checkbox.tsx",
    "description": "",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the label",
        "name": "children",
        "parent": {
          "fileName": "packages/Checkbox/src/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "packages/Checkbox/src/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "Add a specific class to the checkbox",
        "name": "className",
        "parent": {
          "fileName": "packages/Checkbox/src/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "packages/Checkbox/src/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Checkbox/src/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "packages/Checkbox/src/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "Indicates the ID of the element that is controlled by the checkbox",
        "name": "htmlFor",
        "parent": {
          "fileName": "packages/Checkbox/src/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "packages/Checkbox/src/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "checked": {
        "defaultValue": null,
        "description": "Modifies true/false value of the native checkbox",
        "name": "checked",
        "parent": {
          "fileName": "packages/Checkbox/src/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "packages/Checkbox/src/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Modifies the native disabled state of the native checkbox",
        "name": "disabled",
        "parent": {
          "fileName": "packages/Checkbox/src/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "packages/Checkbox/src/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "Applies an indeterminate state to the checkbox",
        "name": "indeterminate",
        "parent": {
          "fileName": "packages/Checkbox/src/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "packages/Checkbox/src/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Function called when the value changes.",
        "name": "onChange",
        "parent": {
          "fileName": "packages/Checkbox/src/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "packages/Checkbox/src/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "(e: ChangeEvent<HTMLInputElement>) => void" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Ellipsis/src/Ellipsis.tsx",
    "description": "",
    "displayName": "Ellipsis",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the ellipsis",
        "name": "children",
        "parent": {
          "fileName": "packages/Ellipsis/src/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "packages/Ellipsis/src/Ellipsis.tsx",
            "name": "EllipsisProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "Add a className for the ellipsis content div",
        "name": "className",
        "parent": {
          "fileName": "packages/Ellipsis/src/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "packages/Ellipsis/src/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Add a className for the ellipsis container div",
        "name": "containerClassName",
        "parent": {
          "fileName": "packages/Ellipsis/src/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "packages/Ellipsis/src/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "title": {
        "defaultValue": null,
        "description": "Add a title to the ellipsis",
        "name": "title",
        "parent": {
          "fileName": "packages/Ellipsis/src/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "packages/Ellipsis/src/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/HelperText/src/HelperText.tsx",
    "description": "",
    "displayName": "HelperText",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Add a specific class to the `HelperText`",
        "name": "className",
        "parent": {
          "fileName": "packages/HelperText/src/HelperText.tsx",
          "name": "HelperTextProps"
        },
        "declarations": [
          {
            "fileName": "packages/HelperText/src/HelperText.tsx",
            "name": "HelperTextProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the HelperText",
        "name": "children",
        "parent": {
          "fileName": "packages/HelperText/src/HelperText.tsx",
          "name": "HelperTextProps"
        },
        "declarations": [
          {
            "fileName": "packages/HelperText/src/HelperText.tsx",
            "name": "HelperTextProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "error": {
        "defaultValue": null,
        "description": "Changes the appearance of component",
        "name": "error",
        "parent": {
          "fileName": "packages/HelperText/src/HelperText.tsx",
          "name": "HelperTextProps"
        },
        "declarations": [
          {
            "fileName": "packages/HelperText/src/HelperText.tsx",
            "name": "HelperTextProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Hyperlink/src/Hyperlink.tsx",
    "description": "",
    "displayName": "Hyperlink",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the link",
        "name": "children",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes the size of link, giving more or less padding",
        "name": "size",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "appearance": {
        "defaultValue": null,
        "description": "Link appearance",
        "name": "appearance",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          }
        ],
        "required": false,
        "type": { "name": "Appearance" }
      },
      "underline": {
        "defaultValue": null,
        "description": "Add a underline on link",
        "name": "underline",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "iconLeading": {
        "defaultValue": null,
        "description": "Icon to display to the left of link content",
        "name": "iconLeading",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "iconTrailing": {
        "defaultValue": null,
        "description": "Icon to display to the right of link content",
        "name": "iconTrailing",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "Add a specific class to the link",
        "name": "className",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "intercomTarget": {
        "defaultValue": null,
        "description": "Add a data-intercom-target with unique id\nto link a components to a Product Tour step",
        "name": "intercomTarget",
        "parent": {
          "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
          "name": "HyperlinkProps"
        },
        "declarations": [
          {
            "fileName": "packages/Hyperlink/src/Hyperlink.tsx",
            "name": "HyperlinkProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/IconButton/src/IconButton.tsx",
    "description": "",
    "displayName": "IconButton",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Add class names to the surrounding DOM container.",
        "name": "className",
        "parent": {
          "fileName": "packages/IconButton/src/IconButton.tsx",
          "name": "IconButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/IconButton/src/IconButton.tsx",
            "name": "IconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon React node to represent the value of the button",
        "name": "icon",
        "parent": {
          "fileName": "packages/IconButton/src/IconButton.tsx",
          "name": "IconButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/IconButton/src/IconButton.tsx",
            "name": "IconButtonProps"
          }
        ],
        "required": true,
        "type": { "name": "ReactNode" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback function that will be called when the user clicks on the button.\n@returns",
        "name": "onClick",
        "parent": {
          "fileName": "packages/IconButton/src/IconButton.tsx",
          "name": "IconButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/IconButton/src/IconButton.tsx",
            "name": "IconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "True if the control is disabled and shows a disabled state. The user cannot click on the button",
        "name": "disabled",
        "parent": {
          "fileName": "packages/IconButton/src/IconButton.tsx",
          "name": "IconButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/IconButton/src/IconButton.tsx",
            "name": "IconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "Button size",
        "name": "size",
        "parent": {
          "fileName": "packages/IconButton/src/IconButton.tsx",
          "name": "IconButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/IconButton/src/IconButton.tsx",
            "name": "IconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "rounded": {
        "defaultValue": null,
        "description": "True for rounded corners",
        "name": "rounded",
        "parent": {
          "fileName": "packages/IconButton/src/IconButton.tsx",
          "name": "IconButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/IconButton/src/IconButton.tsx",
            "name": "IconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/IconButton/src/IconButton.tsx",
          "name": "IconButtonProps"
        },
        "declarations": [
          {
            "fileName": "packages/IconButton/src/IconButton.tsx",
            "name": "IconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "type": {
        "defaultValue": null,
        "description": "Optional prop to specify the type of the Button",
        "name": "type",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "\"button\" | \"reset\" | \"submit\"" }
      },
      "appearance": {
        "defaultValue": null,
        "description": "Button appearance",
        "name": "appearance",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "Appearance" }
      },
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the button",
        "name": "children",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "active": {
        "defaultValue": null,
        "description": "Sets the button in an active state",
        "name": "active",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "loading": {
        "defaultValue": null,
        "description": "Replaces button text with a spinner while a background action is being performed",
        "name": "loading",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "iconLeading": {
        "defaultValue": null,
        "description": "Icon to display to the left of button content",
        "name": "iconLeading",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "iconTrailing": {
        "defaultValue": null,
        "description": "Icon to display to the right of button content",
        "name": "iconTrailing",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "showOnlyIconOnMobile": {
        "defaultValue": null,
        "description": "Display only the icon in mobile",
        "name": "showOnlyIconOnMobile",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "intercomTarget": {
        "defaultValue": null,
        "description": "Add a data-intercom-target with unique id to link a components to a Product Tour step",
        "name": "intercomTarget",
        "parent": {
          "fileName": "components/packages/Button/dist/Button.d.ts",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "components/packages/Button/dist/Button.d.ts",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Input/src/Input.tsx",
    "description": "",
    "displayName": "Input",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Add class names to the surrounding DOM container.",
        "name": "className",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "error": {
        "defaultValue": null,
        "description": "Form.ValidatedField state. True if has error.",
        "name": "error",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "type": {
        "defaultValue": null,
        "description": "Specifies the type to display",
        "name": "type",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "InputType" }
      },
      "isCompact": {
        "defaultValue": null,
        "description": "True for a compact appearance.",
        "name": "isCompact",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "value": {
        "defaultValue": null,
        "description": "Specifies the value inside the input.",
        "name": "value",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "True if you need the input to be focus on page load.",
        "name": "autoFocus",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "True if you need the input to be readonly.",
        "name": "disabled",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Function called when the value changes.",
        "name": "onChange",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "(e: any) => void" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "prefixIcon": {
        "defaultValue": null,
        "description": "Use a prefix for add a icon before the input text",
        "name": "prefixIcon",
        "parent": {
          "fileName": "packages/Input/src/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          { "fileName": "packages/Input/src/Input.tsx", "name": "InputProps" }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Kashim/src/Kashim.tsx",
    "description": "",
    "displayName": "Kashim",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/Radio/src/Radio.tsx",
    "description": "",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the label",
        "name": "children",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "Add a specific class to the checkbox",
        "name": "className",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "Indicates the ID of the element that is controlled by the checkbox",
        "name": "htmlFor",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "small": {
        "defaultValue": null,
        "description": "Changes the size of label",
        "name": "small",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "checked": {
        "defaultValue": null,
        "description": "Modifies true/false value of the native checkbox",
        "name": "checked",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Modifies the native disabled state of the native checkbox",
        "name": "disabled",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "helperText": {
        "defaultValue": null,
        "description": "The content to display to help users",
        "name": "helperText",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Function called when the value changes",
        "name": "onChange",
        "parent": {
          "fileName": "packages/Radio/src/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          { "fileName": "packages/Radio/src/Radio.tsx", "name": "RadioProps" }
        ],
        "required": false,
        "type": { "name": "(e: ChangeEvent<HTMLInputElement>) => void" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Toaster/src/Toast.tsx",
    "description": "",
    "displayName": "Toast",
    "methods": [],
    "props": {
      "toast": {
        "defaultValue": null,
        "description": "",
        "name": "toast",
        "parent": {
          "fileName": "packages/Toaster/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          { "fileName": "packages/Toaster/src/Toast.tsx", "name": "ToastProps" }
        ],
        "required": false,
        "type": { "name": "Toast" }
      },
      "close": {
        "defaultValue": null,
        "description": "",
        "name": "close",
        "parent": {
          "fileName": "packages/Toaster/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          { "fileName": "packages/Toaster/src/Toast.tsx", "name": "ToastProps" }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "packages/Toaster/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          { "fileName": "packages/Toaster/src/Toast.tsx", "name": "ToastProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "iconDescription": {
        "defaultValue": null,
        "description": "",
        "name": "iconDescription",
        "parent": {
          "fileName": "packages/Toaster/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          { "fileName": "packages/Toaster/src/Toast.tsx", "name": "ToastProps" }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Toaster/src/Toaster.tsx",
    "description": "",
    "displayName": "Toaster",
    "methods": [],
    "props": {
      "iconDescription": {
        "defaultValue": null,
        "description": "Add a aria-label to describe the close button",
        "name": "iconDescription",
        "parent": {
          "fileName": "packages/Toaster/src/Toaster.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toaster/src/Toaster.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "\"string\"" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Toaster/src/Toaster.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toaster/src/Toaster.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Toggle/src/Toggle.tsx",
    "description": "",
    "displayName": "Toggle",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content to display inside the label",
        "name": "children",
        "parent": {
          "fileName": "packages/Toggle/src/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toggle/src/Toggle.tsx",
            "name": "ToggleProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "Add a specific class to the toggle",
        "name": "className",
        "parent": {
          "fileName": "packages/Toggle/src/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toggle/src/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "dataTest": {
        "defaultValue": null,
        "description": "Add a data-test tag for automated tests",
        "name": "dataTest",
        "parent": {
          "fileName": "packages/Toggle/src/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toggle/src/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "Indicates the ID of the element that is controlled by the toggle",
        "name": "htmlFor",
        "parent": {
          "fileName": "packages/Toggle/src/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toggle/src/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "checked": {
        "defaultValue": null,
        "description": "Modifies true/false value of the toggle",
        "name": "checked",
        "parent": {
          "fileName": "packages/Toggle/src/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toggle/src/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "helperText": {
        "defaultValue": null,
        "description": "The content to display to help users",
        "name": "helperText",
        "parent": {
          "fileName": "packages/Toggle/src/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toggle/src/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Function called when the value changes",
        "name": "onChange",
        "parent": {
          "fileName": "packages/Toggle/src/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "packages/Toggle/src/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "(e: ChangeEvent<HTMLInputElement>) => void" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/Tooltip/src/Tooltip.tsx",
    "description": "",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The target button, text, svg etc.. of the Tooltip.",
        "name": "children",
        "parent": {
          "fileName": "packages/Tooltip/src/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "packages/Tooltip/src/Tooltip.tsx",
            "name": "TooltipProps"
          },
          {
            "fileName": "components/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "tooltipClassName": {
        "defaultValue": null,
        "description": "Add a specific class to the tooltip",
        "name": "tooltipClassName",
        "parent": {
          "fileName": "packages/Tooltip/src/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "packages/Tooltip/src/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "content": {
        "defaultValue": null,
        "description": "The content to display inside the tooltip",
        "name": "content",
        "parent": {
          "fileName": "packages/Tooltip/src/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "packages/Tooltip/src/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "position": {
        "defaultValue": null,
        "description": "The position the tooltip is on.",
        "name": "position",
        "parent": {
          "fileName": "packages/Tooltip/src/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "packages/Tooltip/src/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": { "name": "Position" }
      },
      "appearance": {
        "defaultValue": null,
        "description": "The appearance of the tooltip.",
        "name": "appearance",
        "parent": {
          "fileName": "packages/Tooltip/src/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "packages/Tooltip/src/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": { "name": "Appearance" }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "The max with of the tooltip",
        "name": "maxWidth",
        "parent": {
          "fileName": "packages/Tooltip/src/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "packages/Tooltip/src/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "active": {
        "defaultValue": null,
        "description": "When True, manually show the Tooltip.",
        "name": "active",
        "parent": {
          "fileName": "packages/Tooltip/src/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "packages/Tooltip/src/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  }
]
